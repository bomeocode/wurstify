/*
=====================================================
  Bootstrap "Bratwurst-Grillfest" - Direkte Zuweisung
=====================================================
*/

/* Globale Variablen, die funktioniert haben, können wir behalten */
:root {
  --bs-primary: #ffc107;
  --bs-secondary: #495057;
  --bs-success: #28a745;
  --bs-danger: #dc3545;
  --bs-warning: #fd7e14;
  --bs-info: #17a2b8;
  --bs-light: #fdf8f0;
  --bs-dark: #3a2e28;
  --bs-body-font-family: "Georgia", "Times New Roman", serif;

  /* Geben Sie die exakte Höhe Ihres Headers und Footers an. */
  --header-height: 56px;
  --footer-height: 93px;
}

/* Grundfarben für die Seite */
body {
  background-color: var(--bs-light);
  color: var(--bs-dark);
}

/*
  DIES IST DER NEUE, WICHTIGE TEIL:
  Wir weisen den Komponenten ihre Farben direkt zu.
  Das ist spezifischer und "gewinnt" gegen die Standardwerte.
*/

.btn-primary {
  --bs-btn-bg: var(--bs-primary);
  --bs-btn-border-color: var(--bs-primary);
  --bs-btn-hover-bg: #e0a800; /* Etwas dunkleres Gelb für Hover */
  --bs-btn-hover-border-color: #c69500;
  --bs-btn-color: var(--bs-dark); /* Dunkler Text für Lesbarkeit */
  --bs-btn-hover-color: var(--bs-dark);
  --bs-btn-active-bg: #c69500; /* Noch dunkler für Klick-Effekt */
  --bs-btn-active-border-color: #c69500;
}

.btn-secondary {
  --bs-btn-bg: var(--bs-secondary);
  --bs-btn-border-color: var(--bs-secondary);
  --bs-btn-hover-bg: #5a6268;
  --bs-btn-hover-border-color: #545b62;
  --bs-btn-color: #fff; /* Heller Text auf dunklem Grund */
  --bs-btn-hover-color: #fff;
}

/* Das gleiche Prinzip für Alerts */
.alert-success {
  --bs-alert-bg: #d4edda;
  --bs-alert-border-color: #c3e6cb;
  --bs-alert-color: #155724;
}

/* ============================================= */
/* Wurstify Navbar Theme                         */
/* ============================================= */

/* 1. Eigene Hintergrundfarbe für die Navbar setzen */
.bg-wurstify {
  /* Senf-Gelb. Das !important stellt sicher, dass diese Regel gewinnt. */
  background-color: #ffc107 !important;
}

/* 2. Textfarben für die helle Navbar anpassen */

/* Standard-Textfarbe für Links und den Brand-Namen */
.navbar-light .navbar-nav .nav-link,
.navbar-light .navbar-brand {
  color: #3a2e28; /* Holztisch-Braun */
}

/* Farbe für den Hover- & Aktiv-Zustand (damit es nicht das Standard-Blau wird) */
/* Wir machen das Braun hier einfach ein wenig dunkler. */
.navbar-light .navbar-nav .nav-link:hover,
.navbar-light .navbar-nav .nav-link:focus,
.navbar-light .navbar-nav .nav-link.active {
  color: #1c1714;
}

/* 3. Farbe des mobilen "Hamburger"-Icons anpassen */

/* Das Icon ist ein SVG, das als Hintergrundbild geladen wird. 
   Wir müssen das SVG direkt anpassen und die Strichfarbe ('stroke') ändern. */
.navbar-light .navbar-toggler-icon {
  background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 30 30'%3e%3cpath stroke='rgba(58, 46, 40, 0.75)' stroke-linecap='round' stroke-miterlimit='10' stroke-width='2' d='M4 7h22M4 15h22M4 23h22'/%3e%3c/svg%3e");
}

/* Optional: Die Rahmenfarbe des Toggler-Buttons an das dunkle Text-Design anpassen */
.navbar-light .navbar-toggler {
  border-color: rgba(58, 46, 40, 0.2);
}

/* Stile für den gekürzten Dateinamen in der Medienliste */
.media-filename {
  /* Wichtig, damit overflow funktioniert */
  display: inline-block;

  /* Verhindere den Zeilenumbruch des Textes */
  white-space: nowrap;

  /* Verstecke den Text, der über den Rand hinausgeht */
  overflow: hidden;

  /* Füge die '...' am Ende des sichtbaren Textes hinzu */
  text-overflow: ellipsis;

  /* Verbessert die vertikale Ausrichtung neben den anderen Infos */
  vertical-align: middle;

  /* Setze eine maximale Breite. Passe diesen Wert nach Bedarf an. */
  max-width: 300px;
}

/* Für kleinere Bildschirme (z.B. unter 576px) können wir die maximale Breite weiter reduzieren */
@media (max-width: 575.98px) {
  .media-filename {
    max-width: 150px; /* Eine kürzere maximale Breite für Handys */
  }
}

/* Stile für den Thumbnail-Container in der Medienliste */
.media-thumbnail {
  flex-shrink: 0; /* Verhindert, dass das Thumbnail bei Platzmangel schrumpft */
  width: 64px;
  height: 64px;
  display: flex;
  justify-content: center;
  align-items: center;
  background-color: #f8f9fa; /* Heller Hintergrund für Icons */
  border: 1px solid #dee2e6;
  border-radius: 0.25rem;
}

/* Sorgt dafür, dass Bilder den Thumbnail-Bereich schön ausfüllen, ohne sich zu verzerren */
.media-thumbnail img {
  max-width: 100%;
  max-height: 100%;
  width: auto;
  height: auto;
  object-fit: cover;
}

/* Map */
/* Container für die Karte, damit sie responsive ist */
/* Der Container, der die Karte hält.
   Wir nehmen ihn aus dem normalen Seitenfluss und spannen ihn über den ganzen Viewport. */
#map-container {
  position: fixed; /* Bleibt fixiert im Fenster */
  top: var(--header-height); /* Startet unterhalb des Headers */
  bottom: var(--footer-height); /* Endet oberhalb des Footers */
  left: 0;
  right: 0; /* left: 0 und right: 0 spannen es über die volle Breite */
  width: 100%; /* Breite bleibt 100% */
  z-index: 1; /* Liegt auf der untersten Ebene */
}

/* Die Leaflet-Karte selbst muss den Container nun vollständig ausfüllen. */
#map {
  width: 100%;
  height: 100%;
}

/* ------------------------------------------------------------- */
/* Overlay-Elemente (Überschrift, Tooltip)                       */
/* ------------------------------------------------------------- */

/* Wir stylen die h1-Überschrift als schwebendes Overlay-Element. */
.content h1 {
  position: absolute;
  top: 20px;
  left: 20px;
  z-index: 1001; /* Liegt über der Karte und den Leaflet-Controls */

  background-color: rgba(255, 255, 255, 0.85);
  padding: 10px 20px;
  border-radius: 8px;
  box-shadow: 0 2px 5px rgba(0, 0, 0, 0.2);
  font-size: 1.5rem;
}

/* Der Tooltip muss ebenfalls über der Karte schweben. */
#tooltip {
  z-index: 1002; /* Höchster z-index, damit er immer sichtbar ist */
}

/* WICHTIG: Stellt sicher, dass die Leaflet-Controls (Zoom, Copyright)
   über der Karte, aber unter unseren eigenen Overlays liegen. */
.leaflet-control-container {
  z-index: 1000;
}

/* Stellt sicher, dass ein Element aus dem sichtbaren Bereich verschwindet,
   aber für Screenreader und den Browser-Fokus erreichbar bleibt. */
.visually-hidden {
  position: absolute;
  width: 1px;
  height: 1px;
  padding: 0;
  margin: -1px;
  overflow: hidden;
  clip: rect(0, 0, 0, 0);
  white-space: nowrap;
  border: 0;
}

.fab {
  /* Positionierung */
  position: fixed; /* Fixiert den Button am Browserfenster */
  left: 50%; /* Zentriert den linken Rand des Buttons horizontal */
  transform: translateX(
    -50%
  ); /* Zieht den Button um seine halbe Breite zurück, um ihn perfekt zu zentrieren */
  bottom: calc(
    var(--footer-height) + 20px
  ); /* Positioniert ihn 20px über Ihrem Sticky Footer */
  z-index: 1001; /* Stellt sicher, dass er über der Karte, aber unter dem Tooltip liegt */

  /* Aussehen */
  width: 60px;
  height: 60px;
  border-radius: 50%; /* Macht den Button perfekt rund */
  background-color: var(
    --bs-primary
  ); /* Verwendet Ihre primäre Theme-Farbe (Senf-Gelb) */
  color: var(--bs-dark); /* Verwendet Ihre dunkle Theme-Farbe für das Icon */
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.3); /* Schöner Schatten für den "schwebenden" Effekt */

  /* Inhalt zentrieren (das Plus-Icon) */
  display: flex;
  justify-content: center;
  align-items: center;

  /* Übergang für sanfte Hover-Effekte */
  transition: all 0.2s ease-in-out;
}

.fab:hover {
  color: var(--bs-dark);
  transform: translateX(-50%) scale(1.1); /* Vergrößert den Button leicht beim Darüberfahren */
  box-shadow: 0 6px 16px rgba(0, 0, 0, 0.35);
}

/* Anpassung der Größe des SVG-Icons im Button */
.fab svg {
  width: 32px;
  height: 32px;
}
